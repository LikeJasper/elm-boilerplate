var _LikeJasper$elm_boilerplate$App_SampleTest$testSuite = A2(
	_elm_community$elm_test$ElmTest$suite,
	'App.Sample',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$ElmTest$suite,
			'sum',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_community$elm_test$ElmTest$test,
					'should return a sum of 2 Ints',
					A2(
						_elm_community$elm_test$ElmTest$assertEqual,
						8,
						A2(_LikeJasper$elm_boilerplate$App_Sample$sum, 3, 5))),
					A2(
					_elm_community$elm_test$ElmTest$test,
					'should return a sum of 2 Floats',
					A2(
						_elm_community$elm_test$ElmTest$assertEqual,
						-10.5,
						A2(_LikeJasper$elm_boilerplate$App_Sample$sum, -20.5, 10)))
				])),
			function (_p0) {
			return _elm_community$elm_check$Check_Test$evidenceToTest(
				_elm_community$elm_check$Check$quickCheck(_p0));
		}(
			A2(
				_elm_community$elm_check$Check$suite,
				'product',
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_community$elm_check$Check$for,
						A2(
							_elm_community$elm_check$Check$is,
							A2(
								_elm_community$elm_check$Check$that,
								_elm_community$elm_check$Check$claim('should multiply Ints'),
								function (_p1) {
									var _p2 = _p1;
									return A2(_LikeJasper$elm_boilerplate$App_Sample$product, _p2._0, _p2._1);
								}),
							function (_p3) {
								var _p4 = _p3;
								return _p4._0 * _p4._1;
							}),
						_elm_community$elm_check$Check_Producer$tuple(
							{ctor: '_Tuple2', _0: _elm_community$elm_check$Check_Producer$int, _1: _elm_community$elm_check$Check_Producer$int})),
						A2(
						_elm_community$elm_check$Check$for,
						A2(
							_elm_community$elm_check$Check$is,
							A2(
								_elm_community$elm_check$Check$that,
								_elm_community$elm_check$Check$claim('should multiply Floats'),
								function (_p5) {
									var _p6 = _p5;
									return A2(_LikeJasper$elm_boilerplate$App_Sample$product, _p6._0, _p6._1);
								}),
							function (_p7) {
								var _p8 = _p7;
								return _p8._0 * _p8._1;
							}),
						_elm_community$elm_check$Check_Producer$tuple(
							{ctor: '_Tuple2', _0: _elm_community$elm_check$Check_Producer$float, _1: _elm_community$elm_check$Check_Producer$float})),
						A2(
						_elm_community$elm_check$Check$for,
						A2(
							_elm_community$elm_check$Check$true,
							_elm_community$elm_check$Check$claim('should be inverted by division with minimal imprecision'),
							function (_p9) {
								var _p10 = _p9;
								var _p12 = _p10._1;
								var _p11 = _p10._0;
								return _elm_lang$core$Native_Utils.cmp(
									_elm_lang$core$Basics$abs(
										(A2(_LikeJasper$elm_boilerplate$App_Sample$product, _p11, _p12) / _p12) - _p11),
									1.0e-6) < 0;
							}),
						A2(
							_elm_community$elm_check$Check_Producer$filter,
							function (_p13) {
								var _p14 = _p13;
								return !_elm_lang$core$Native_Utils.eq(_p14._1, 0);
							},
							_elm_community$elm_check$Check_Producer$tuple(
								{ctor: '_Tuple2', _0: _elm_community$elm_check$Check_Producer$float, _1: _elm_community$elm_check$Check_Producer$float})))
					])))
		]));
